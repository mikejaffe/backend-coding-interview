---
openapi: 3.0.1
info:
  title: Photos API V1
  version: v1
  description: A RESTful API for photo management with user authentication
paths:
  "/api/v1/photographers":
    get:
      summary: List Photographers
      tags:
      - Photographers
      description: Get paginated list of photographers
      security:
      - Bearer: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: false
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      - name: name
        in: query
        required: false
        description: Filter by photographer name (partial match)
        schema:
          type: string
      responses:
        '200':
          description: photographers filtered by name
    post:
      summary: Create Photographer
      tags:
      - Photographers
      description: Create a new photographer
      security:
      - Bearer: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '201':
          description: photographer created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                photographer:
                  type: object
                  properties:
                    name:
                      type: string
                    external_id:
                      type: string
                    external_service:
                      type: string
                    external_url:
                      type: string
                    external_avatar_url:
                      type: string
                  required:
                  - name
  "/api/v1/photographers/{id}":
    parameters:
    - name: id
      in: path
      description: Photographer ID
      required: true
      schema:
        type: integer
    get:
      summary: Show Photographer
      tags:
      - Photographers
      description: Get a single photographer by ID
      security:
      - Bearer: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: photographer found
        '404':
          description: photographer not found
    delete:
      summary: Delete Photographer
      tags:
      - Photographers
      description: Soft delete a photographer
      security:
      - Bearer: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: photographer deleted
        '404':
          description: photographer not found
  "/api/v1/photos":
    get:
      summary: List Photos
      tags:
      - Photos
      description: Get paginated list of photos
      security:
      - Bearer: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: false
        description: Page number
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: Items per page
        schema:
          type: integer
      - name: photographer_id
        in: query
        required: false
        description: Filter by photographer ID
        schema:
          type: integer
      responses:
        '200':
          description: photos retrieved by photographer
        '401':
          description: unauthorized
    post:
      summary: Create Photo
      tags:
      - Photos
      description: Create a new photo
      security:
      - Bearer: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '201':
          description: photo created
        '422':
          description: invalid parameters
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                photo:
                  type: object
                  properties:
                    photographer_id:
                      type: integer
                    external_id:
                      type: string
                    width:
                      type: integer
                    height:
                      type: integer
                    src_urls:
                      type: object
                      properties:
                        original:
                          type: string
                        large:
                          type: string
                        medium:
                          type: string
                        small:
                          type: string
                        tiny:
                          type: string
                  required:
                  - photographer_id
                  - src_urls
  "/api/v1/photos/{id}":
    parameters:
    - name: id
      in: path
      description: Photo ID
      required: true
      schema:
        type: integer
    get:
      summary: Show Photo
      tags:
      - Photos
      description: Get a single photo by ID
      security:
      - Bearer: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: photo found
        '404':
          description: photo not found
    delete:
      summary: Delete Photo
      tags:
      - Photos
      description: Soft delete a photo
      security:
      - Bearer: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      responses:
        '200':
          description: photo deleted
        '404':
          description: photo not found
  "/api/v1/login":
    post:
      summary: User Login
      tags:
      - Authentication
      description: Authenticate user and receive API token
      parameters: []
      responses:
        '200':
          description: login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: API token for subsequent requests
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
                required:
                - token
                - user
        '401':
          description: invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                session:
                  type: object
                  properties:
                    email:
                      type: string
                      example: user@example.com
                    password:
                      type: string
                      example: Password123!
                  required:
                  - email
                  - password
              required:
              - session
  "/api/v1/logout":
    delete:
      summary: User Logout
      tags:
      - Authentication
      description: Invalidate the current user token
      security:
      - Bearer: []
      parameters:
      - name: Authorization
        in: header
        required: true
        description: 'API token (format: Bearer YOUR_TOKEN)'
        schema:
          type: string
      responses:
        '204':
          description: logout successful
        '401':
          description: unauthorized
  "/api/v1/signup":
    post:
      summary: User Registration
      tags:
      - Users
      description: Create a new user account
      parameters: []
      responses:
        '201':
          description: user created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: API token for the new user
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
                required:
                - token
                - user
        '422':
          description: invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    name:
                      type: string
                      example: John Doe
                    email:
                      type: string
                      example: john@example.com
                    password:
                      type: string
                      example: Password123!
                  required:
                  - name
                  - email
                  - password
              required:
              - user
servers:
- url: http://localhost:3000
  description: Development server
components:
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
      description: 'API token for authentication. Format: Bearer YOUR_TOKEN'
